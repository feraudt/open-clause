@startuml

actor developer
actor holder_Alice
actor holder_Bob
collections blockchain

== Deployment of the smart contracts ==

group from developper account#0
developer -> developer : unlock account#0
activate developer
developer -> blockchain : deploy smart contract ERC20 "token payment"
blockchain -> blockchain : ERC20: name, symbol, address, total_supply
developer -> blockchain : deploy smart contract ERC1400
blockchain -> blockchain : ERC1400: address, isControllable, ERC20.address
developer -> blockchain : deploy smart contract clause option
blockchain -> blockchain : clause_option: address, ERC20.address, ERC1400.address
deactivate developer
end

== Register the roles on smart contract ERC1400 ==

group registration

holder_Alice -> holder_Alice : unlock account#1
activate holder_Alice
holder_Alice -> blockchain : ERC1400: register account#1 as Holder
deactivate holder_Alice

holder_Bob -> holder_Bob : unlock account#2
activate holder_Bob
holder_Bob -> blockchain : ERC1400: register account#2 as Holder
deactivate holder_Bob

developer -> blockchain : ERC1400: register clause_option.address as Escrow

end

== Acquisition of partitions ==

group set up the partitions
developer --> blockchain : ERC20: transfer 20 tokens to holder_Alice (account#1)

activate holder_Alice
holder_Alice -> blockchain : ERC20: give allowance to ERC1400.address for 5 tokens 
holder_Alice -> blockchain : ERC1400: acquisition of the partition 1234 for 2 tokens
blockchain -> blockchain : ERC1400 to ERC20: debit of account#1 of 2 tokens
holder_Alice -> blockchain : ERC1400: acquisition of the partition 5678 for 3 tokens
blockchain -> blockchain : ERC1400 to ERC20: debit of account#1 of 3 tokens
deactivate holder_Alice
end

== Clause Option ==

group option right #1: promisor is holder_Alice, recipient is holder_Bob, partition is 1234, priceExercise is 3 tokens, priceOption is 1 token, duration is 2 days
holder_Bob -> blockchain : ERC20: give allowance to clause_option.address for 1 token
holder_Alice -> blockchain : ERC1400: give allowance to clause_option.address to confine its partition 1234

holder_Alice -> blockchain : clause_option: startOption (launch the timer)
blockchain -> blockchain : clause_option to ERC20: debit of account#2 (holder_Bob) of 1 token (priceOption)
blockchain -> blockchain : clause_option to ERC1400: confine partition 1234 (owner holder_Alice)

holder_Bob -> blockchain : ERC20: give allowance to ERC1400 for 3 tokens 
holder_Bob -> blockchain : clause_option: recipientAccept (in the option right's duration)
blockchain -> blockchain : clause_option to ERC1400: transfer partition 1234 to holder_Bob
blockchain -> blockchain : ERC1400 to ERC20: debit of account#2 (holder_Bob) of 3 token (priceExercise)
end

group option right #2: promisor is holder_Alice, recipient is holder_Bob, partition is 5678, priceExercise is 3 tokens, priceOption is 1 token, duration is 3 days
holder_Bob -> blockchain : ERC20: give allowance to clause_option.address for 1 token
holder_Alice -> blockchain : ERC1400: give allowance to clause_option.address to confine its partition 5678

holder_Alice -> blockchain : clause_option: startOption (launch the timer)
blockchain -> blockchain : clause_option to ERC20: debit of account#2 (holder_Bob) of 1 token (priceOption)
blockchain -> blockchain : clause_option to ERC1400: confine partition 5678 (owner holder_Alice)

holder_Bob -> blockchain : clause_option: recipientDeny (in the option right's duration)
blockchain -> blockchain : clause_option to ERC1400: deconfine partition 5678 (owner holder_Alice)
end

group option right #3: promisor is holder_Bob, recipient is holder_Alice, partition is 1234, priceExercise is 2 tokens, priceOption is 1 token, duration is 2 minutes
holder_Alice -> blockchain : ERC20: give allowance to clause_option.address for 1 token
holder_Bob -> blockchain : ERC1400: give allowance to clause_option.address to confine its partition 1234

holder_Bob -> blockchain : clause_option: startOption (launch the timer)
blockchain -> blockchain : clause_option to ERC20: debit of account#1 (holder_Alice) of 1 token (priceOption)
blockchain -> blockchain : clause_option to ERC1400: confine partition 1234 (owner holder_Bob)

holder_Bob -> blockchain : clause_option: stopOption (after the option right's duration)
blockchain -> blockchain : clause_option to ERC1400: deconfine partition 1234 (owner holder_Bob)
end

@enduml
